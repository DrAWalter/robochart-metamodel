Model RoboChart

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package robochart <http://www.robocalc.circus/RoboChart>

  Class RCPackage
    Attribute name : EString
    Reference imports : Import<<0..*>>
    Reference interfaces : Interface<<0..*>>
    Reference robots : RoboticPlatformDef<<0..*>>
    Reference types : TypeDecl<<0..*>>
    Reference machines : StateMachineDef<<0..*>>
    Reference controllers : ControllerDef<<0..*>>
    Reference modules : RCModule<<0..*>>
    Reference operations : OperationDef<<0..*>>
    Reference functions : Function<<0..*>>

  Class Import
    Attribute importedNamespace : EString<<1..1>>

  Class NamedElement
    Attribute name : EString<<1..1>>

  Class TypeDecl -> NamedElement

  Class PrimitiveType -> TypeDecl

  Class DataType -> TypeDecl
    Reference fields : Field<<1..*>>

  Class Field -> Member, NamedExpression

  Class TypedNamedElement -> NamedElement
    Reference type : Type<<1..1>>

  Class Member -> TypedNamedElement

  Class Enumeration -> TypeDecl
    Reference literals : Literal<<0..*>>

  Class Literal -> TypeDecl, NamedExpression
    Reference types : Type<<0..*>>

  Class NameType -> TypeDecl
    Reference type : Type<<1..1>>

  Class Type

  Class ProductType -> Type
    Reference types : Type<<2..*>>

  Class RelationType -> Type
    Reference domain : Type<<1..1>>
    Reference range : Type<<1..1>>

  Class FunctionType -> RelationType

  Class SetType -> Type
    Reference domain : Type<<1..1>>

  Class SeqType -> SetType

  Class TypeRef -> Type
    Reference ref : TypeDecl<<1..1>>

  Class VariableList
    Attribute /modifier : EString<<1..1>>
    Attribute isConstants : EBoolean<<1..1>>
    Reference vars : Variable<<1..*>>

  Class Variable -> TypedNamedElement, NamedExpression
    Reference initial : Expression
    Attribute /modifier : EString<<1..1>>

  Class Event -> NamedElement
    Reference type : Type
    Attribute broadcast : EBoolean<<1..1>>

  Class Function -> TypedNamedElement, NamedExpression
    Reference parameters : Parameter<<0..*>>
    Reference preconditions : Expression<<0..*>>
    Reference postconditions : Expression<<0..*>>

  Class Parameter -> Variable

  Class Operation -> NamedElement

  Class OperationSig -> Operation
    Attribute terminates : EBoolean<<1..1>>
    Reference parameters : Parameter<<0..*>>
    Reference preconditions : Expression<<0..*>>
    Reference postconditions : Expression<<0..*>>

  Class OperationDef -> OperationSig, StateMachineBody

  Class OperationRef -> Operation
    Reference ref : OperationDef<<1..1>>

  Class Interface -> NamedElement, BasicContext

  Class BasicContext
    Reference variableList : VariableList<<0..*>>
    Reference operations : OperationSig<<0..*>>
    Reference events : Event<<0..*>>

  Class RoboticPlatform -> NamedElement, ConnectionNode

  Class RoboticPlatformDef -> Context, RoboticPlatform

  Class Context -> BasicContext
    Reference pInterfaces : Interface<<0..*>>
    Reference rInterfaces : Interface<<0..*>>
    Reference interfaces : Interface<<0..*>>

  Class RoboticPlatformRef -> RoboticPlatform
    Reference ref : RoboticPlatformDef<<1..1>>

  Class StateMachine -> NamedElement, ConnectionNode

  Class StateMachineDef -> StateMachineBody, StateMachine

  Class StateMachineRef -> StateMachine
    Reference ref : StateMachineDef<<1..1>>

  Class StateMachineBody -> Context, NodeContainer
    Reference clocks : Clock<<0..*>>

  Class Clock -> NamedElement

  Class NodeContainer
    Reference nodes : Node<<0..*>>
    Reference transitions : Transition<<0..*>>

  Class Node -> NamedElement

  Class Junction -> Node

  Class Initial -> Junction

  Class State -> Node, NodeContainer
    Reference actions : Action<<0..*>>

  Class Final -> Node

  Class ProbabilisticJunction -> Junction

  Class Transition -> NamedElement
    Reference source : Node<<1..1>>
    Reference target : Node<<1..1>>
    Reference start : Expression
    Reference trigger : Trigger
    Reference end : Expression
    Reference condition : Expression
    Reference action : Statement
    Reference probability : Expression

  Class Trigger
    Reference event : Event
    Reference _from : Variable
    Reference _predicate : Expression
    Reference parameter : Variable
    Reference value : Expression
    Reference time : Variable
    Reference reset : ClockReset<<0..*>>
    Attribute _type : TriggerType<<1..1>>

  Class Action
    Reference action : Statement<<1..1>>

  Class EntryAction -> Action

  Class DuringAction -> Action

  Class ExitAction -> Action

  Class Controller -> NamedElement, ConnectionNode

  Class ControllerDef -> Context, Controller
    Reference machines : StateMachine<<0..*>>
    Reference connections : Connection<<0..*>>

  Class Connection
    Reference from : ConnectionNode<<1..1>>
    Reference to : ConnectionNode<<1..1>>
    Reference efrom : Event<<1..1>>
    Reference eto : Event<<1..1>>
    Attribute async : EBoolean<<1..1>>
    Attribute bidirec : EBoolean<<1..1>>

  Class ControllerRef -> Controller
    Reference ref : ControllerDef<<1..1>>

  Class RCModule -> NamedElement
    Reference connections : Connection<<0..*>>
    Reference nodes : ConnectionNode<<0..*>>

  Class Statement

  Class TimedStatement -> Statement
    Reference start : Expression
    Reference stmt : Statement<<1..1>>
    Reference end : Expression

  Class Wait -> Statement
    Reference duration : Expression<<1..1>>

  Class Skip -> Statement

  Class IfStmt -> Statement
    Reference expression : Expression<<1..1>>
    Reference then : Statement<<1..1>>
    Reference else : Statement

  Class Assignment -> Statement
    Reference left : Assignable<<1..1>>
    Reference right : Expression<<1..1>>

  Class SendEvent -> Statement
    Reference trigger : Trigger<<1..1>>

  Class SeqStatement -> Statement
    Reference statements : Statement<<2..*>>

  Class ParStmt -> Statement
    Reference stmt : Statement<<1..1>>

  Class Call -> Statement
    Reference operation : Operation<<1..1>>
    Reference args : Expression<<0..*>>

  Class ClockReset -> Statement
    Reference clock : Clock<<1..1>>

  Class Expression

  Class ResultExp -> Expression

  Class ArrayExp -> Expression
    Reference value : Expression<<1..1>>
    Reference parameters : Expression<<0..*>>

  Class ClockExp -> Expression
    Reference clock : Clock<<1..1>>

  Class StateClockExp -> Expression
    Reference state : State<<1..1>>

  Class BinaryExpression
    Reference left : Expression<<1..1>>
    Reference right : Expression<<1..1>>

  Class Iff -> BinaryExpression

  Class Implies -> BinaryExpression

  Class Or -> BinaryExpression

  Class QuantifierExpression
    Reference variables : Variable<<1..*>>
    Reference suchthat : Expression
    Reference predicate : Expression<<1..1>>

  Class Forall -> QuantifierExpression

  Class Exists -> QuantifierExpression
    Attribute unique : EBoolean<<1..1>>

  Class LambdaExp -> Expression
    Reference variables : Variable<<1..*>>
    Reference suchthat : Expression
    Reference expression : Expression<<1..1>>

  Class DefiniteDescription -> LambdaExp

  Class IfExpression -> Expression
    Reference condition : Expression<<1..1>>
    Reference ifexp : Expression<<1..1>>
    Reference elseexp : Expression<<1..1>>

  Class Declaration -> NamedElement, NamedExpression
    Reference value : Expression<<1..1>>

  Class LetExpression -> Expression
    Reference declarations : Declaration<<1..*>>
    Reference expression : Expression<<1..1>>

  Class And -> BinaryExpression

  Class Not -> Expression
    Reference exp : Expression<<1..1>>

  Class InExp -> Expression
    Reference member : Expression<<1..1>>
    Reference set : Expression<<1..1>>

  Class TypeExp -> Expression
    Reference type : Type<<1..1>>

  Class Equals -> BinaryExpression

  Class Different -> BinaryExpression

  Class GreaterThan -> BinaryExpression

  Class GreaterOrEqual -> BinaryExpression

  Class LessThan -> BinaryExpression

  Class LessOrEqual -> BinaryExpression

  Class Plus -> BinaryExpression

  Class Minus -> BinaryExpression

  Class Modulus -> BinaryExpression

  Class Mult -> BinaryExpression

  Class Div -> BinaryExpression

  Class Cat -> BinaryExpression

  Class Neg -> Expression
    Reference exp : Expression<<1..1>>

  Class Selection -> Expression
    Reference receiver : Expression<<1..1>>
    Reference member : Member<<1..1>>

  Class IntegerExp -> Expression
    Attribute value : EInt<<1..1>>

  Class FloatExp -> Expression
    Attribute value : EFloat<<1..1>>

  Class StringExp -> Expression
    Attribute value : EString<<1..1>>

  Class BooleanExp -> Expression
    Attribute value : EString<<1..1>>

  Class VarExp -> Expression
    Reference value : Variable<<1..1>>

  Class RefExp -> Expression
    Reference ref : NamedExpression<<1..1>>

  Class ToExp -> Expression

  Class FromExp -> Expression

  Class IdExp -> Expression

  Class AsExp -> Expression
    Reference exp : Expression<<1..1>>
    Reference type : Type<<1..1>>

  Class IsExp -> Expression
    Reference exp : Expression<<1..1>>
    Reference type : Type<<1..1>>

  Class EnumExp -> Expression
    Reference type : Enumeration<<1..1>>
    Reference literal : Literal<<1..1>>

  Class ParExp -> Expression
    Reference exp : Expression<<1..1>>

  Class SeqExp -> Expression
    Reference values : Expression<<0..*>>

  Class SetExp -> Expression
    Reference values : Expression<<0..*>>

  Class SetComp -> Expression
    Reference variables : Variable<<1..*>>
    Reference predicate : Expression
    Reference expression : Expression

  Class SetRange -> Expression
    Reference start : Expression<<1..1>>
    Reference end : Expression<<1..1>>

  Class TupleExp -> Expression
    Reference values : Expression<<2..*>>

  Class RangeExp -> Expression
    Attribute linterval : EString<<1..1>>
    Reference lrange : Expression<<1..1>>
    Reference rrange : Expression<<1..1>>
    Attribute rinterval : EString<<1..1>>

  Class CallExp -> Expression
    Reference function : Expression<<1..1>>
    Reference args : Expression<<0..*>>

  Class ElseExp -> Expression

  Class Assignable

  Class VarSelection -> Assignable
    Reference receiver : Assignable<<1..1>>
    Reference member : Member<<1..1>>

  Class ArrayAssignable -> Assignable
    Reference value : Assignable<<1..1>>
    Reference parameters : Expression<<1..*>>

  Class VarRef -> Assignable
    Reference name : Variable<<1..1>>

  Class ConnectionNode

  Class NamedExpression

  Enum TriggerType
    Literal SIMPLE = 0
    Literal INPUT = 0
    Literal OUTPUT = 0
    Literal SYNC = 0
    Literal EMPTY = 0
